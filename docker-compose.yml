services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: lespatounes-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-lespatounes}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ${DOCKER_NETWORK:-lespatounes-network}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NestJS API
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: lespatounes-api
    restart: unless-stopped
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/lespatounes?schema=public}
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${API_PORT:-3000}
      JWT_SECRET: ${JWT_SECRET:-change-me-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost}
    ports:
      - "${API_PORT:-3000}:${API_PORT:-3000}"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ${DOCKER_NETWORK:-lespatounes-network}
    volumes:
      - ./api/prisma:/app/prisma

  # React App
  app:
    build:
      context: ./app
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:3000}
    container_name: lespatounes-app
    restart: unless-stopped
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3000}
    ports:
      - "${APP_PORT:-80}:80"
    depends_on:
      - api
    networks:
      - ${DOCKER_NETWORK:-lespatounes-network}

volumes:
  postgres_data:
    driver: local

networks:
  lespatounes-network:
    driver: bridge
